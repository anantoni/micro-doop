/**********************************************************************
 * Handles the implicit calls to java.lang.ref.Finalizer.register by
 * the JVM.
 *
 * As opposed to Paddle, we don't make an explicit call graph edge
 * from the method that allocates to the register method, since there
 * is technically not such edge. Maybe we can add a notion of implicit
 * call graph edges for that.
 *
 * @author Martin Bravenboer
 ***********************************************************************/


/**
 * For a heap allocation of an object that overrides Object.finalize,
 * invoke the method Finalizer.register to register the object for
 * finalization. The allocated object becomes the actual parameter to
 * Finalizer.register.
 */
CallGraphEdge(Context(?caller, ?heap), Context(?callee, ?register)),
VarPointsTo(HeapContext(?heapCtx, ?heap), Context(?callee, ?formal)) <-
  ReachableContext(Context(?caller, ?inmethod)),
  AssignHeapAllocation(?heap, _, ?inmethod),
  FinalizerRegisterInfo(?register, ?formal),
  HeapAllocation:Type[?heap] = ?class,
  OverridesFinalize(?class),

  /* macro to decide on the calling context of the register call */
  BindHeapContext(?heapCtx, ?heap, ?caller),
  BindFinalizerRegisterContext(?callee, ?inmethod, ?heapCtx, ?heap, ?caller).

/**
 * Auxillary predicate providing the necessary information for
 * generating implicit invocations to java.lang.ref.Finalizer.register.
 *
 * signature: method signature of java.lang.ref.Finalizer.register
 * formal: the variable representing the formal parameter of java.lang.ref.Finalizer.register
 */
FinalizerRegisterInfo(?signature, ?formal) -> MethodSignatureRef(?signature), VarRef(?formal).
FinalizerRegisterInfo(?register, ?formal) <-
  MethodSignatureRef:Value(?register:"<java.lang.ref.Finalizer: void register(java.lang.Object)>"),
  ParamIndexRef:Value(?zero:0),
  FormalParam[?zero, ?register] = ?formal.

/**
 * Classes that override Object.finalize.
 *
 * TODO change Type to ClassType when BloxUnit supports it.
 */
OverridesFinalize(?class) -> Type(?class).
OverridesFinalize(?class) <-
  MethodLookup[?simplename, ?descriptor, ?class] = ?method,
  MethodDescriptorRef:Value(?descriptor:"void()"),
  SimpleNameRef:Value(?simplename:"finalize"),
  MethodSignatureRef:Value(?finalizeObject:"<java.lang.Object: void finalize()>"),
  ?finalizeObject != ?method.

/**************************************************************************
 *
 * Indirect invocations of finalize methods from java.lang.ref.Finalizer.
 *
 * Object.finalize is a protected method, so it cannot be directly
 * invoked.  Finalizer uses an indirection via native code to
 * circumvent this.  This rule implements this indirection.
 *
 *
 * Now implemented by fact generation in native-delta.logic.
 *
 ***************************************************************************/
